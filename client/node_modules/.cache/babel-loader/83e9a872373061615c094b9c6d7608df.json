{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, GET_PROFILES, PROFILE_ERROR, UPDATE_PROFILE, CLEAR_PROFILE, ACCOUNT_DELETED, GET_REPOS, NO_REPOS } from './types'; // Get current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('http://127.0.0.1:5000/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    console.error(err.response.data.msg);\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('http://127.0.0.1:5000/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('http://127.0.0.1:5000/api/profile', formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`http://127.0.0.1:5000/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Github repos\n\nexport const getGithubRepos = username => async dispatch => {\n  try {\n    const res = await axios.get(`http://127.0.0.1:5000/api/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: NO_REPOS\n    });\n  }\n}; // Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('http://127.0.0.1:5000/api/profile/experience', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // // Add Education\n// export const addEducation = (formData, history) => async dispatch => {\n//   try {\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     };\n//     const res = await axios.put('/api/profile/education', formData, config);\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n//     dispatch(setAlert('Education Added', 'success'));\n//     history.push('/dashboard');\n//   } catch (err) {\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n//     }\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };\n// Delete experience\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(`http://127.0.0.1:5000/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // // Delete education\n// export const deleteEducation = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/education/${id}`);\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n//     dispatch(setAlert('Education Removed', 'success'));\n//   } catch (err) {\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };\n// Delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await axios.delete('http://127.0.0.1:5000/api/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been permanantly deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/home/lav/Web Development/My-web-apps/DevConnector/client/src/reduxstuff/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","GET_PROFILES","PROFILE_ERROR","UPDATE_PROFILE","CLEAR_PROFILE","ACCOUNT_DELETED","GET_REPOS","NO_REPOS","getCurrentProfile","dispatch","res","get","type","payload","data","err","console","error","response","msg","statusText","status","getProfiles","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","getProfileById","userId","getGithubRepos","username","addExperience","put","deleteExperience","id","delete","deleteAccount","window","confirm"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,SACEC,WADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,aALF,EAMEC,eANF,EAOEC,SAPF,EAQEC,QARF,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACzD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,sCAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,QAAJ,CAAaJ,IAAb,CAAkBK,GAAhC;AACAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,QAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOb,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;;AAEA,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,mCAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,YADC;AAEPY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,QAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAME,aAAa,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAAI,GAAG,KAA3B,KAAqC,MAChEjB,QADgE,IAE7D;AACH,MAAI;AACF,UAAMkB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMlB,GAAG,GAAG,MAAMZ,KAAK,CAAC+B,IAAN,CAChB,mCADgB,EAEhBL,QAFgB,EAGhBG,MAHgB,CAAlB;AAMAlB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACV,QAAQ,CAAC2B,IAAI,GAAG,iBAAH,GAAuB,iBAA5B,EAA+C,SAA/C,CAAT,CAAR;AAEAD,IAAAA,OAAO,CAACK,IAAR,CAAa,YAAb;AACD,GArBD,CAqBE,OAAOf,GAAP,EAAY;AACZ,UAAMgB,MAAM,GAAGhB,GAAG,CAACG,QAAJ,CAAaJ,IAAb,CAAkBiB,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,OAAP,CAAgBf,KAAD,IAAW;AACxBR,QAAAA,QAAQ,CAACV,QAAQ,CAACkB,KAAK,CAACE,GAAP,EAAY,QAAZ,CAAT,CAAR;AACD,OAFD;AAGD;;AAEDV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,QAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAtCM,C,CAwCP;;AACA,OAAO,MAAMY,cAAc,GAAIC,MAAD,IAAY,MAAOzB,QAAP,IAAoB;AAC5D,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CACf,0CAAyCuB,MAAO,EADjC,CAAlB;AAIAzB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GATD,CASE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,QAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMc,cAAc,GAAIC,QAAD,IAAc,MAAO3B,QAAP,IAAoB;AAC9D,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CACf,4CAA2CyB,QAAS,EADrC,CAAlB;AAIA3B,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,SADC;AAEPO,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GATD,CASE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAGD;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAM8B,aAAa,GAAG,CAACb,QAAD,EAAWC,OAAX,KAAuB,MAAOhB,QAAP,IAAoB;AACtE,MAAI;AACF,UAAMkB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMlB,GAAG,GAAG,MAAMZ,KAAK,CAACwC,GAAN,CAChB,8CADgB,EAEhBd,QAFgB,EAGhBG,MAHgB,CAAlB;AAMAlB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,cADC;AAEPU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACV,QAAQ,CAAC,kBAAD,EAAqB,SAArB,CAAT,CAAR;AAEA0B,IAAAA,OAAO,CAACK,IAAR,CAAa,YAAb;AACD,GArBD,CAqBE,OAAOf,GAAP,EAAY;AACZ,UAAMgB,MAAM,GAAGhB,GAAG,CAACG,QAAJ,CAAaJ,IAAb,CAAkBiB,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,OAAP,CAAgBf,KAAD,IAAWR,QAAQ,CAACV,QAAQ,CAACkB,KAAK,CAACE,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AAEDV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,QAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAlCM,C,CAoCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMkB,gBAAgB,GAAIC,EAAD,IAAQ,MAAO/B,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAAC2C,MAAN,CACf,gDAA+CD,EAAG,EADnC,CAAlB;AAIA/B,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,cADC;AAEPU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAACV,QAAQ,CAAC,oBAAD,EAAuB,SAAvB,CAAT,CAAR;AACD,GAXD,CAWE,OAAOgB,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,QAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAlBM,C,CAoBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMqB,aAAa,GAAG,MAAM,MAAOjC,QAAP,IAAoB;AACrD,MAAIkC,MAAM,CAACC,OAAP,CAAe,uCAAf,CAAJ,EAA6D;AAC3D,QAAI;AACF,YAAM9C,KAAK,CAAC2C,MAAN,CAAa,mCAAb,CAAN;AAEAhC,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAER;AAAR,OAAD,CAAR;AACAK,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEP;AAAR,OAAD,CAAR;AAEAI,MAAAA,QAAQ,CAACV,QAAQ,CAAC,2CAAD,CAAT,CAAR;AACD,KAPD,CAOE,OAAOgB,GAAP,EAAY;AACZN,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEV,aADC;AAEPW,QAAAA,OAAO,EAAE;AAAEM,UAAAA,GAAG,EAAEJ,GAAG,CAACG,QAAJ,CAAaE,UAApB;AAAgCC,UAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAArD;AAFF,OAAD,CAAR;AAID;AACF;AACF,CAhBM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n  GET_PROFILE,\n  GET_PROFILES,\n  PROFILE_ERROR,\n  UPDATE_PROFILE,\n  CLEAR_PROFILE,\n  ACCOUNT_DELETED,\n  GET_REPOS,\n  NO_REPOS,\n} from './types';\n\n// Get current users profile\nexport const getCurrentProfile = () => async (dispatch) => {\n  try {\n    const res = await axios.get('http://127.0.0.1:5000/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.error(err.response.data.msg);\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get all profiles\nexport const getProfiles = () => async (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n\n  try {\n    const res = await axios.get('http://127.0.0.1:5000/api/profile');\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Create or update profile\nexport const createProfile = (formData, history, edit = false) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post(\n      'http://127.0.0.1:5000/api/profile',\n      formData,\n      config\n    );\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get profile by ID\nexport const getProfileById = (userId) => async (dispatch) => {\n  try {\n    const res = await axios.get(\n      `http://127.0.0.1:5000/api/profile/user/${userId}`\n    );\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get Github repos\nexport const getGithubRepos = (username) => async (dispatch) => {\n  try {\n    const res = await axios.get(\n      `http://127.0.0.1:5000/api/profile/github/${username}`\n    );\n\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: NO_REPOS,\n    });\n  }\n};\n\n// Add Experience\nexport const addExperience = (formData, history) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.put(\n      'http://127.0.0.1:5000/api/profile/experience',\n      formData,\n      config\n    );\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Experience Added', 'success'));\n\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// // Add Education\n// export const addEducation = (formData, history) => async dispatch => {\n//   try {\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     };\n\n//     const res = await axios.put('/api/profile/education', formData, config);\n\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n\n//     dispatch(setAlert('Education Added', 'success'));\n\n//     history.push('/dashboard');\n//   } catch (err) {\n//     const errors = err.response.data.errors;\n\n//     if (errors) {\n//       errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n//     }\n\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };\n\n// Delete experience\nexport const deleteExperience = (id) => async (dispatch) => {\n  try {\n    const res = await axios.delete(\n      `http://127.0.0.1:5000/api/profile/experience/${id}`\n    );\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// // Delete education\n// export const deleteEducation = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/education/${id}`);\n\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n\n//     dispatch(setAlert('Education Removed', 'success'));\n//   } catch (err) {\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };\n\n// Delete account & profile\nexport const deleteAccount = () => async (dispatch) => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await axios.delete('http://127.0.0.1:5000/api/profile');\n\n      dispatch({ type: CLEAR_PROFILE });\n      dispatch({ type: ACCOUNT_DELETED });\n\n      dispatch(setAlert('Your account has been permanantly deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status },\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}