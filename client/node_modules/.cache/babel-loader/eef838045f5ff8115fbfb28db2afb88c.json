{"ast":null,"code":"import { REGISTER_FAIL, REGISTER_SUCCESS, AUTH_ERROR, USER_LOADED, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport axios from 'axios';\nimport { setAlert } from './alert'; // import setAuthToken from '../utils/setAuthToken';\n//  Load User\n\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/login');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Regiseter user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/signup', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const error = err.response.data.errors; // This errors will come from backend that we setted as errors.array\n\n    if (error) {\n      error.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const error = err.response.data.errors; // This errors will come from backend that we setted as errors.array\n\n    if (error) {\n      error.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/lav/Web Development/My-web-apps/DevConnector/client/src/reduxstuff/actions/auth.js"],"names":["REGISTER_FAIL","REGISTER_SUCCESS","AUTH_ERROR","USER_LOADED","LOGIN_SUCCESS","LOGIN_FAIL","axios","setAlert","loadUser","dispatch","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","error","response","errors","forEach","msg","login"],"mappings":"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","sourcesContent":["import {\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n  AUTH_ERROR,\n  USER_LOADED,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n} from './types';\nimport axios from 'axios';\nimport { setAlert } from './alert';\n// import setAuthToken from '../utils/setAuthToken';\n\n//  Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/login');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Regiseter user\nexport const register = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, email, password });\n  try {\n    const res = await axios.post('/api/signup', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const error = err.response.data.errors; // This errors will come from backend that we setted as errors.array\n\n    if (error) {\n      error.forEach((error) => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login user\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n  try {\n    const res = await axios.post('/api/login', body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const error = err.response.data.errors; // This errors will come from backend that we setted as errors.array\n\n    if (error) {\n      error.forEach((error) => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}